<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('../partials/head'); %>
</head>
<body class="container">

<header>
  <%- include('../partials/header'); %>
</header>

<main>
  <div class="jumbotron">
    <h1>Fleet Modification</h1><br>
    <p>This page is used to locate, update, add or delete a vehicle in our inventory.</p><br>
    <label for="vDropdown" id="vDropdownLbl">Vehicle</label>
  </div>
  <p id="output"></p>
  <div class="vForm">
      <form id="vForm">
        <div class="form-group">
          <label for="stock_number">Stock Number</label>
          <input type="text" class="form-control submitValue validate" id="stock_number" name="stockNum" pattern="^[a-zA-Z0-9]*$" value="" required>
        </div>
        <div class="form-group">
          <label for="year">Year - 4 digit (YYYY)</label>
          <input type="number" class="form-control submitValue validate" id="year" name="year" minLength="4" maxLength="4" min="1999" value="" required>
        </div>
        <div class="form-group">
          <label for="make">Make</label>
          <input type="text" class="form-control submitValue validate" id="make" name="make" value="" required>
        </div>
        <div class="form-group">
          <label for="model">Model</label>
          <input type="text" class="form-control submitValue validate" id="model" name="model" value="" required>
        </div>
        <div class="form-group">
          <label for="color">Color</label>
          <input type="text" class="form-control submitValue validate" id="color" name="color" value="" required>
        </div> 
        <div class="form-group">
          <label for="vin">VIN</label>
          <input type="text" class="form-control submitValue validate" id="vin" name="vin" minLength="17" maxLength="17" pattern="^[a-zA-Z0-9]*$" value="" required>
        </div> 
        <div class="form-group">
          <label for="mileage">Mileage</label>
          <input type="number" class="form-control submitValue validate" id="mileage" name="mileage" min="1" pattern="[^\s]+" value="" required>
        </div>
                 <br><br>
          
                 <label for="status" id="statusLbl">Status</label>
          <br><br>
          <button type="button" class="btn btn-primary" onclick="javascript: send();">Submit</button>
          <button type="button" class="btn btn-secondary" onclick="javascript: edtForm();">Edit</button>
          <button type="button" class="btn btn-secondary trigger">Delete Record</button>

      </form>
  </div>
    <div class="modal">
        <div class="modal-content">
            <p>If you want to delete this vehicle from the fleet, please enter the word "DELETE"!</p>
            <input type="text" id="deleteText" name="deleteText" style="width:50%;margin:auto">
            <br>
            <p style="margin: auto;">
            <button type="button" class="btn btn-primary" style="width:80px;height:40px" name="closeButton" onclick="javascript: toggleDelModal();">Cancel</button>
            <button type="button" class="btn btn-primary" style="width:80px;height:40px" name="deleteButton" id="confirmDel" disabled>Delete</button>
            </p>
        </div>
    </div>
</main>

<footer>
  <%- include('../partials/footer'); %>
</footer>
<script>
    let fleetArray = [];
    const output = document.getElementById("output");
    const modalDel = document.querySelector(".modal");
    const trigger = document.querySelector(".trigger");
    const closeButton = document.querySelector(".close-button");
    const delText = document.getElementById('deleteText');
    const delBtn = document.getElementById('confirmDel');
    document.getElementById('year').setAttribute('max', new Date().getFullYear() + 1);

    const updateFleetArray = async function () {
        if (fleetArray.length) {
            fleetArray = [];
        }
        <% for (let i = 0; i < fleet.length; i++) { %>
            fleetArray.push({
                'stock_number': "<%= fleet[i].stock_number %>",
                'year': <%= fleet[i].year %>,
                'make': "<%= fleet[i].make %>",
                'model': "<%= fleet[i].model %>",
                'color': "<%= fleet[i].color %>",
                'vin': "<%= fleet[i].vin %>",
                'mileage': <%= fleet[i].mileage %>,
                'status': "<%= fleet[i].status %>"
            });
        <% } %>
    };
    updateFleetArray();

    var hasError = function (field) {

        if (field.disabled || ['file', 'reset', 'submit', 'button'].includes(field.type)) return;

        const validity = field.validity;

        if (validity.valueMissing || /^[\s]+/.test(field.value)) return '* This field is required.';
        if (validity.patternMismatch) return '* Only letters or numbers allowed. No spaces or other characters.';
        if (validity.badInput) return '* Please enter a valid number';
        if (validity.tooShort) return '* Entered data not long enough.';
        if (validity.tooLong) return '* Entered data is too long';
        if (field.type === 'number' && field.value.substring(0, 1) === '0') return '* Number cannot begin with 0.';
        if (field.maxLength > 1 || field.minLength > 1) {
            if (field.minLength > field.value.length) return `* Value entered isn't long enough`;
            if (field.maxLength < field.value.length) return `* Value entered is too long`;
        }
        if (validity.rangeUnderflow) return `* Value is too low. Please enter a year between 1999 and ${new Date().getFullYear() + 1}.`;
        if (validity.rangeOverflow) return `* Value is too high. Please enter a year between 1999 and ${new Date().getFullYear() + 1}.`;

        return false;
    };

    var showError = function (field, error) {
        // Add error class to field
        field.classList.add('error');

        // Get field id or name
        var id = field.id || field.name;
        if (!id) return;

        // Check if error message field already exists
        // If not, create one
        var message = field.form.querySelector('.error-message#error-for-' + id);
        if (!message) {
            message = document.createElement('div');
            message.className = 'error-message';
            message.id = 'error-for-' + id;
            field.parentNode.insertBefore(message, field.nextSibling);
        }

        // Add ARIA role to the field
        field.setAttribute('aria-describedby', 'error-for-' + id);

        // Update error message
        message.innerHTML = error;

        // Show error message
        message.style.display = 'block';
        message.style.visibility = 'visible';
    };

    var removeError = function (field) {

        // Remove error class to field
        field.classList.remove('error');

        // Remove ARIA role from the field
        field.removeAttribute('aria-describedby');

        // Get field id or name
        var id = field.id || field.name;
        if (!id) return;

        // Check if an error message is in the DOM
        var message = field.form.querySelector('.error-message#error-for-' + id + '');
        if (!message) return;

        // If so, hide it
        message.innerHTML = '';
        message.style.display = 'none';
        message.style.visibility = 'hidden';
    };

    document.addEventListener('blur', function (event) {

        if (event.target && (!event.target.classList || !event.target.classList.contains('validate'))) return;

        let error = hasError(event.target);
        
        if (error) {
            showError(event.target, error);
        } else {
            removeError(event.target);
        }

    }, true);

    function populateDropdown() {
        let select = document.createElement("select");
        select.required = true;
        select.title = "Vehicle Dropdown";
        select.name = "Vehicle Dropdown";
        select.id = "vDropdown";
        select.classList.add('form-control');
        let option = document.createElement("option");
        option.value = "addVehicle";
        option.id = "add";
        option.text = "Add a New Vehicle...";
        select.appendChild(option);

        fleetArray.forEach(function (fa) {
            option = document.createElement("option");
            option.value = fa.stock_number;
            option.id = `v${fleetArray.findIndex((obj) => { return obj.stock_number === fa.stock_number })}`;
            option.text = `${fa.stock_number} - ${fa.year} ${fa.make} ${fa.model}: ${fa.color}`;
            select.appendChild(option);
        });

        let selectOld = document.getElementById("vDropdown");
        if (selectOld) {
            const parentNode = selectOld.parentNode;
            parentNode.replaceChild(select, selectOld);
            document.getElementById("vDropdown").value = "addVehicle";
        } else {
            document.getElementById("vDropdownLbl").appendChild(select);
        }

        select = document.createElement("select");
        select.required = true;
        select.title = "status";
        select.name = "status";
        select.id = "status";
        select.className = "submitValue";
        select.classList.add('form-control');
        option = document.createElement("option");
        option.value = "available";
        option.id = "status0";
        option.text = "Available";
        select.appendChild(option);
        option = document.createElement("option");
        option.value = "loaned";
        option.id = "status1";
        option.text = "Loaned Out";
        select.appendChild(option);
        option = document.createElement("option");
        option.value = "repair";
        option.id = "status2";
        option.text = "Repairing";
        select.appendChild(option);
        option = document.createElement("option");
        option.value = "decommission";
        option.id = "status3";
        option.text = "Decommissioned";
        select.appendChild(option);

        selectOld = document.getElementById("status");
        if (selectOld) {
            let oldValue = selectOld.value;
            const parentNode = selectOld.parentNode;
            parentNode.replaceChild(select, selectOld);
            document.getElementById("status").value = oldValue;
        } else {
            document.getElementById("statusLbl").appendChild(select);
        }

        document.getElementById("vDropdown").addEventListener('change', function () {
            output.innerHTML = "";
            if (this.value !== 'addVehicle') {
                let idx = fleetArray.findIndex((obj) => { return obj.stock_number === this.value });
                const elementIds = document.getElementById('vForm').querySelectorAll("*[id]");
                for (let i = 0; i < elementIds.length; i++) {
                    if (elementIds[i].tagName !== 'SELECT' && elementIds[i].tagName !== 'LABEL' && elementIds[i].tagName !== 'OPTION') {
                        document.getElementById(elementIds[i].id).value = fleetArray[idx][elementIds[i].id];
                        document.getElementById(elementIds[i].id).setAttribute('readonly', true);
                        document.getElementById(elementIds[i].id).style.backgroundColor = "#CCCCCC";
                    } else if (elementIds[i].tagName === 'OPTION' && elementIds[i].value === fleetArray[idx].status) {
                        document.getElementById("status").value = fleetArray[idx].status;
                        document.getElementById("status").setAttribute('disabled', 'true');
                        document.getElementById("status").style.backgroundColor = "#CCCCCC";
                    }
                }
            } else {
                const elementIds = document.getElementsByClassName("submitValue");
                for (let i = 0; i < elementIds.length; i++) {
                    if (elementIds[i].tagName !== 'SELECT') {
                        document.getElementById(elementIds[i].id).value = null;
                        document.getElementById(elementIds[i].id).style.backgroundColor = null;
                        document.getElementById(elementIds[i].id).removeAttribute('readonly');
                    } else {
                        document.getElementById(elementIds[i].id).value = 'available';
                        document.getElementById(elementIds[i].id).style.backgroundColor = null;
                        document.getElementById("status").removeAttribute('disabled');
                    }
                }
            }
        });
    };
    populateDropdown();


    const edtForm = async function () {
        const editForm = document.getElementById("vDropdown");
        if (editForm.value !== 'addVehicle') {
            let idx = fleetArray.findIndex((obj) => { return obj.stock_number === editForm.value });
            const elementIds = document.getElementById('vForm').querySelectorAll("*[id]");

            for (let i = 0; i < elementIds.length; i++) {
                if (elementIds[i].tagName !== 'SELECT' && elementIds[i].tagName !== 'LABEL' && elementIds[i].tagName !== 'OPTION') {
                    document.getElementById(elementIds[i].id).removeAttribute('readonly');
                    document.getElementById(elementIds[i].id).style.backgroundColor = null;
                } else if (elementIds[i].tagName === 'OPTION' && elementIds[i].value === fleetArray[idx].status) {
                    document.getElementById("status").removeAttribute('disabled');
                    document.getElementById("status").style.backgroundColor = null;

                }
                
            }

        }
    };

    const verifyInput = async function () {
        let dataValid = true;
        const elementIds = document.getElementsByClassName('validate');
        for (let i = 0; i < elementIds.length; i++) {
            let error = hasError(elementIds[i]);

            if (error) {
                showError(event.target, error);
                dataValid = false;
            } else {
                removeError(event.target);
            }
        }
        return dataValid;
    };

    const send = async function () {
        const dataValid = await verifyInput();
        const bodyObj = {};
        const elementIds = document.getElementsByClassName("submitValue");
        for (let i = 0; i < elementIds.length; i++) {
            Object.assign(bodyObj, { [elementIds[i].id]: elementIds[i].value });
        }
        if (dataValid) {
            const response = await fetch("/fleet", {
                method: "POST",
                headers: {
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(bodyObj)
            });
            const result = await response.json();

            if (result.error) {
                if (result.error == 'Update') {
                    output.innerHTML = `<h3><strong>ERROR: Unable to update current record, Reason: ${result.msg.routine}</strong></h3>`;
                } else if (result.error == 'Insert') {
                    output.innerHTML = `<h3><strong>ERROR: Unable to insert record ${result.stock_number}, Reason: ${result.msg.routine}</strong></h3>`;
                } else {
                    output.innerHTML = `<h3><strong>ERROR: Unable to connect to database. Reason: ${result.msg.routine}</strong></h3>`;
                }  
            } else {
                if (result.status == 'Updated') {
                    output.innerHTML = `<h3><strong>${result.stock_number} has been updated.</strong></h3>`;
                } else {
                    output.innerHTML = `<h3><strong>${result.stock_number} has been added to the fleet.</strong></h3>`;
                }
                fleetArray = result.fleet;
                populateDropdown();
                document.getElementById('vForm').reset();
            } 
        } 
    };

    const delRecord = async function () {
        const dataValid = await verifyInput();
        if (dataValid) {
            if (confirmDel) {
                const response = await fetch("/fleet", {
                    method: "POST",
                    headers: {
                        "Accept": "application/json",
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ 'stock_number': document.getElementById('stock_number').value, 'request': 'delete' })
                });
                const result = await response.json();

                if (result.error) {
                    output.innerHTML = `<h3><strong>ERROR: Unable to delete record ${result.stock_number} from the database. Reason: ${result.msg.routine}</strong></h3>`;
                } else if (result.status == 'Deleted') {
                    output.innerHTML = `<h3><strong>Record ${result.stock_number} has been deleted.</strong></h3>`;
                    document.getElementById('vForm').reset();
                } else {
                    output.innerHTML = `<h3><strong>ERROR: Record ${result.stock_number} does not exist.</strong></h3>`;
                }
                fleetArray = result.fleet;
                populateDropdown();
            }
        }
    };

    /* Delete Modal functions */
    function toggleDelModal() {
        modalDel.classList.toggle("show-modal");
        if (!modalDel.classList.contains('show-modal')) {
            delText.value = "";
        }
    }

    function windowOnClick(event) {
        if (event.target === modalDel) {
            toggleDelModal();
        }
    }

    trigger.addEventListener("click", toggleDelModal);
    window.addEventListener("click", windowOnClick);
    delText.addEventListener("input", function() {
        if (this.value === 'DELETE') {
            delBtn.removeAttribute('disabled');
        } else {
            delBtn.setAttribute('disabled', true);
        }
    });

    delBtn.addEventListener("click", function() {
        delRecord();
        toggleDelModal();
    });
    /* End of Modal functions */

    function AvoidSpace(event) {
        var k = event ? event.which : window.event.keyCode;
        if (k == 32) return false;
    }
</script>
</body>
</html>