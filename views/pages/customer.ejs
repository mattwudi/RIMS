<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('../partials/head'); %>
</head>
<body class="container">

<header>
  <%- include('../partials/header'); %>
</header>

<main id="main">
  <div class="jumbotron">
    <h1>Customer Page</h1>
    <p>Search or Add Customers.</p>
    <p id="infoMessage"></p>
  </div>
  <p id="output"></p>
  <div class="row">
    <div class="cForm left">
        <form id="searchForm">
            <fieldset>
                <legend>Search Existing Customers</legend>
                <div class="form-group">
                  <div class="col-9">
                    <label for="searchFName">First Name</label>
                    <input type="text" id="searchFName" class="form-control searchValue" name="f_name" value="">
                  </div>
                </div>
                <div class="form-group">
                  <div class="col-9">
                    <label for="searchLName">Last Name</label>
                    <input type="text" id="searchLName" class="form-control searchValue" name="l_name" value="">
                  </div>
                </div>
            </fieldset>
            <br>
            <button type="button" class="btn btn-primary" onclick="javascript: searchCust();">Search</button>
        </form>
        <div id="listbox"></div>
    </div>
    <div class="cForm right">
      <form id="cForm">
        <fieldset>
          <legend id="custInfoHeader">Enter New Customer Information</legend>
          <div class="form-group">
            <div class="col-9">
              <label for="fName">First Name</label>
              <input type="text" id="fName" class="form-control addValue validate" name="f_name" value="" required>
            </div>
          </div>
          <div class="form-group">
            <div class="col-9">
              <label for="lName">Last Name</label>
              <input type="text" id="lName" class="form-control addValue validate" name="l_name" value="" required>
            </div>
          </div>
          <div class="form-group">
            <div class="col-9">
              <label for="pNumber">Phone Number</label>
              <input type="tel" id="pNumber" class="form-control addValue validate" name="phone" pattern="[0-9]{10}" value="" required>
            </div>
          </div>
          <div class="form-group">
            <div class="col-9">
              <label for="address">Address</label>
              <input type="text" id="address" class="form-control addValue validate" name="address" value="" required>
            </div>
          </div>
          <div class="form-group">
            <div class="col-9">
              <label for="city">City</label>
              <input type="text" id="city" class="form-control addValue validate" name="city" value="" required>
            </div>
          </div>
          <div class="form-group">
            <div class="col-9">
              <label for="state">State</label>
              <input type="text" id="state" class="form-control addValue validate" name="state" maxlength="2" size="2" onkeypress="return AvoidSpace(event)" value="" oninput="this.value = this.value.replace(/[^A-Za-z]/g, '').replace(/(.*)/g, '$1')" required>
            </div>
          </div>
          <div class="form-group">
            <div class="col-9">
              <label for="zCode">Zip Code</label>
              <input type="number" id="zCode" class="form-control addValue validate" name="zip_code" minLength="5" maxLength="5" size="5" min="1" value="" required>
            </div>
          </div>
          <div class="form-group">
            <div class="col-9">
              <label for="bDay">Birthday</label>
              <input type="date" id="bDay" class="form-control addValue validate" name="birthday" value="" required>
            </div>
          </div>
          <div class="form-group">
            <div class="col-9">
              <label for="lNumber">License Number</label>
              <input type="text" id="lNumber" class="form-control addValue validate" name="license_num" onkeypress="return AvoidSpace(event)" value="" required>
            </div>
          </div>
          <div class="form-group">
            <div class="col-9">
              <label for="licExp">License Expiration</label>
              <input type="date" id="licExp" class="form-control addValue validate" name="license_exp" value="" required>
            </div>
          </div>
          <div class="form-group">
            <div class="col-9">
              <label for="insName">Insurance Name</label>
              <input type="text" id="insName" class="form-control addValue validate" name="ins_name" value="" required>
            </div>
          </div>
          <div class="form-group">
            <div class="col-9">
              <label for="insPolicy">Insurance Policy Number</label>
              <input type="text" id="insPolicy" class="form-control addValue validate" name="ins_policy" value="" required>
            </div>
          </div>
          <div class="form-group">
            <div class="col-9">
              <label for="insExp">Insurance Expiration Date</label>
              <input type="date" id="insExp" class="form-control addValue validate" name="ins_exp" value="" required>
            </div>
          </div>
          
        </fieldset>
        <br>
        <button type="button" class="btn btn-primary" onclick="javascript: addUser();" id="addBtn">Add</button>
      </form>
    </div>
  </div>
</main>
<script type="text/javascript">
  const output = document.getElementById('output');
  output.style.color = "#F00"
  let custId = 0;

  var hasError = function (field) {
    if (field.disabled || ['file', 'reset', 'submit', 'button'].includes(field.type)) return;
    let currentDate = new Date();
    currentDate.setHours(0,0,0,0);
    const minAge = new Date(currentDate.getFullYear() - 25, currentDate.getMonth(), currentDate.getDate());
    const validity = field.validity;

    if (validity.valueMissing || /^[\s]+/.test(field.value)) return '* This field is required.';
    if (field.type === 'text' && validity.patternMismatch) return '* Only letters or numbers allowed. No spaces or other characters.';
    if (field.type === 'tel' && validity.patternMismatch) return '* Only numbers are allowed. Must be 10 digits.'
    if (field.type === 'tel' && field.value.substring(0, 1) === '0') return '* Phone number must not begin with 0.'
    if (validity.badInput) return '* Please enter a valid number';
    if (validity.tooShort) return '* Entered data not long enough.';
    if (validity.tooLong) return '* Entered data is too long';
    if (field.maxLength > 1 || field.minLength > 1) {
        if (field.minLength > field.value.length) return `* Value entered isn't long enough`;
        if (field.maxLength < field.value.length) return `* Value entered is too long`;
    }
    if (field.id === 'bDay' && new Date(field.value) > minAge) return `* Customer is younger than 25.`;
    if (field.type === 'date' && field.id !== 'bDay' && new Date(field.value) < currentDate) return `* Expired Date.`;

    return false;
  };

  var showError = function (field, error) {
    // Add error class to field
    field.classList.add('error');

    // Get field id or name
    var id = field.id || field.name;
    if (!id) return;

    // Check if error message field already exists
    // If not, create one
    var message = field.form.querySelector('.error-message#error-for-' + id);
    if (!message) {
        message = document.createElement('div');
        message.className = 'error-message';
        message.id = 'error-for-' + id;
        field.parentNode.insertBefore(message, field.nextSibling);
    }

    // Add ARIA role to the field
    field.setAttribute('aria-describedby', 'error-for-' + id);

    // Update error message
    message.innerHTML = error;

    // Show error message
    message.style.display = 'block';
    message.style.visibility = 'visible';
  };

  var removeError = function (field) {

    // Remove error class to field
    field.classList.remove('error');

    // Remove ARIA role from the field
    field.removeAttribute('aria-describedby');

    // Get field id or name
    var id = field.id || field.name;
    if (!id) return;

    // Check if an error message is in the DOM
    var message = field.form.querySelector('.error-message#error-for-' + id + '');
    if (!message) return;

    // If so, hide it
    message.innerHTML = '';
    message.style.display = 'none';
    message.style.visibility = 'hidden';
  };

  document.addEventListener('blur', function (event) {

    if (event.target && (!event.target.classList || !event.target.classList.contains('validate'))) return;

    let error = hasError(event.target);

    if (error) {
        showError(event.target, error);
    } else {
        removeError(event.target);
    }

  }, true);

  const verifyInput = async function () {
    output.innerHTML = "";
    let dataValid = true;
    const elementIds = document.getElementsByClassName('validate');
    for (let i = 0; i < elementIds.length; i++) {
        let error = hasError(elementIds[i]);
        if (error) {
            showError(elementIds[i], error);
            dataValid = false;
        } else {
            removeError(elementIds[i]);
        }
    }
    return dataValid;
  };

  const addUser = async () => {
    output.innerHTML = "";
    const dataValid = await verifyInput();
    if (dataValid) {
      const bodyObj = {};
      const elementIds = document.getElementsByClassName("addValue");
      for (let i = 0; i < elementIds.length; i++) {
        Object.assign(bodyObj, { [elementIds[i].name]: elementIds[i].value });
      }
      const response = await fetch("/customer/addUser", {
        method: "POST",
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json"
        },
        body: JSON.stringify(bodyObj)
      });
      const result = await response.json();

      if (result.error) {
        output.innerHTML = `<h4>Error: ${result.error.routine}</h4>`;
      } else if (result.status === 'NotExist') {
        output.innerHTML = `<h4>Customer ${result.f_name} ${result.l_name} 
          did not exist. ` + 
          (result.id ? `Customer created with id ${result.id}` : 
          `User not able to be created.`) + '</h4>';
      } else if (result.status === 'Exist') {
        output.innerHTML = `<h4>Customer ${result.f_name} ${result.l_name} exists.
          Please verify this customer doesn't exist.</h4>`;
      }
    }
    custId = 0; // Reset search ID
  };

  const loadCust = async (id) => {
    output.innerHTML = "";
    if (id) {
      const response = await fetch("/customer/loadCustomer", {
      method: "POST",
      headers: {
        "Accept": "application/json",
        "Content-Type": "application/json"
      },
      body: JSON.stringify({ id: id })
      });
      const result = await response.json();

      if (result.error) {
        output.innerHTML = `<h4>Error: ${result.error.routine}</h4>`;
      } else {
        const inFields = document.getElementsByClassName('addValue');
        for (let i = 0; i < inFields.length; i++) {
          document.getElementById(inFields[i].id).setAttribute('readonly', true);
          document.getElementById(inFields[i].id).style.backgroundColor = "#CCCCCC";
          if (inFields[i].type === 'date') {
            let fDate = result.results[inFields[i].name].substring(0, 10);
            inFields[i].value = fDate;
          } else {
            inFields[i].value = result.results[inFields[i].name];
          }
        }
        const addBtnRemove = document.getElementById('addBtn');
        if (addBtnRemove) addBtnRemove.parentNode.removeChild(addBtnRemove);
        const editBtnVerify = document.getElementById('editBtn');
        if (!editBtnVerify) {
          const editBtn = document.createElement('button');
          editBtn.type = "button";
          editBtn.id = "editBtn";
          editBtn.className = "btn btn-primary"
          editBtn.setAttribute('onclick', 'javascript: enableEdit();');
          editBtn.innerHTML = "Edit Customer";
          const custForm = document.getElementById('cForm');
          custForm.appendChild(editBtn);
        }
        const updateBtn = document.getElementById('updateBtn');
        if (updateBtn) updateBtn.parentNode.removeChild(updateBtn);
        const cancelBtn = document.getElementById('cancelBtn');
        if (cancelBtn) cancelBtn.parentNode.removeChild(cancelBtn);
        document.getElementById('custInfoHeader').innerHTML = 'Customer Information';
      }
    } else {
      output.innerHTML = "<h4>Error: Customer wasn't selected. Please select a Customer or Add a new customer.</h4>";
    }
    const elementIds = document.getElementsByClassName('validate');
    for (let i = 0; i < elementIds.length; i++) {
      removeError(elementIds[i]);
    }
  };

  const enableEdit = () => {
    const inFields = document.getElementsByClassName('addValue');
    for (let i = 0; i < inFields.length; i++) {
      document.getElementById(inFields[i].id).removeAttribute('readonly');
      document.getElementById(inFields[i].id).style.backgroundColor = null;
    }
    const updateBtn = document.createElement('button');
    updateBtn.type = "button";
    updateBtn.id = "updateBtn";
    updateBtn.className = "btn btn-primary";
    updateBtn.setAttribute('onclick', 'javascript: updateCust();');
    updateBtn.innerHTML = "Update Customer";
    const custForm = document.getElementById('cForm');
    custForm.appendChild(updateBtn);
    const child = document.getElementById('editBtn');
    child.parentNode.removeChild(child);
    const cancelBtn = document.createElement('button');
    cancelBtn.type = "button";
    cancelBtn.id = "cancelBtn";
    cancelBtn.className = "btn btn-primary";
    cancelBtn.setAttribute('onclick', `javascript: loadCust(custId);`);
    cancelBtn.innerHTML = "Cancel";
    custForm.appendChild(cancelBtn);
    document.getElementById('custInfoHeader').innerHTML = 'Edit Exisitng Customer Information';
  };

  const updateCust = async () => {
    output.innerHTML = "";
    const dataValid = await verifyInput();
    if (dataValid) {
      const bodyObj = {};
      Object.assign(bodyObj, { 'id': custId });
      const elementIds = document.getElementsByClassName("addValue");
      for (let i = 0; i < elementIds.length; i++) {
        Object.assign(bodyObj, { [elementIds[i].name]: elementIds[i].value });
      }
      const response = await fetch("/customer/updateCustomer", {
        method: "POST",
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json"
        },
        body: JSON.stringify(bodyObj)
      });
      const result = await response.json();

      if (result.error) {
        output.innerHTML = `<h4>Error: ${result.error.routine}</h4>`;
      } else if (result.status === 'success') {
        output.innerHTML = `<h4>Customer '${result.results.l_name}, ${result.results.f_name}'' Updated!</h4>`;
      } else {
        output.innerHTML = `<h4>Update to customer was not made.</h4>`;
      }
      const updateBtnRemove = document.getElementById('updateBtn');
      updateBtnRemove.parentNode.removeChild(updateBtnRemove);
      const cancelBtn = document.getElementById('cancelBtn');
      cancelBtn.parentNode.removeChild(cancelBtn);
      const addBtn = document.createElement('button');
      addBtn.type = "button";
      addBtn.id = "addBtn";
      addBtn.className = "btn btn-primary";
      addBtn.innerHTML = "Add";
      addBtn.setAttribute('onclick', 'javascript: addUser();');
      document.getElementById('cForm').appendChild(addBtn);
      document.getElementById('cForm').reset();
      document.getElementById('listbox').innerHTML = '';
      document.getElementById('custInfoHeader').innerHTML = 'Enter New Customer Information';
      custId = 0; // Reset search ID
    }
    
  };

  const searchCust = async () => {
    const listbox = document.getElementById('listbox');
    listbox.innerHTML = "";
    output.innerHTML = "";
    const bodyObj = {};
    const elementIds = document.getElementsByClassName("searchValue");
      for (let i = 0; i < elementIds.length; i++) {
        Object.assign(bodyObj, { [elementIds[i].name]: elementIds[i].value });
    }
    const response = await fetch("/customer/searchCustomer", {
      method: "POST",
      headers: {
        "Accept": "application/json",
        "Content-Type": "application/json"
      },
      body: JSON.stringify(bodyObj)
    });
    const result = await response.json();

    if (result.error) {
      output.innerHTML = `<h3>Error: ${result.error.routine}</h3>`;
    } else if (result.results && result.results.length) {
      const fieldsetTag = document.createElement('fieldset');
      const btnSubmit = document.createElement('button');
      const brTag = document.createElement('br');
      btnSubmit.type = "button";
      btnSubmit.className = "btn btn-primary btnLoad";
      btnSubmit.innerHTML = "Load Customer";
      btnSubmit.setAttribute('onclick', "javascript: loadCust(custId);");
      listbox.innerHTML = "";
      const legendTag = document.createElement('legend');
      legendTag.innerHTML = "Select an existing Customer...";
      const selectList = document.createElement('select');
      selectList.id = "selectList";
      selectList.size = "5";
      for (let i=0; i < result.results.length; i++) {
        let item = document.createElement('option');
        item.id = result.results[i].id;
        item.value = `id${result.results[i].id}`;
        let bDay = result.results[i].birthday.substring(0, 10);
        item.text = `${bDay}: ${result.results[i].l_name}, ${result.results[i].f_name}`;
        selectList.appendChild(item);
      }
      const h6Tag = document.createElement('h6');
      h6Tag.innerHTML = "(DOB: Last Name, First Name)";
      fieldsetTag.appendChild(legendTag);
      fieldsetTag.appendChild(h6Tag);
      fieldsetTag.appendChild(selectList);
      fieldsetTag.appendChild(brTag);
      listbox.appendChild(fieldsetTag);
      listbox.appendChild(btnSubmit);
      document.getElementById('selectList').addEventListener('change', function () {
        custId = this.value.substring(2);
      });
    } else {
      output.innerHTML = "<h4>No Customers exist with that search criteria.</h4>";
    }
  };

  function AvoidSpace(event) {
        var k = event ? event.which : window.event.keyCode;
        if (k == 32) return false;
    }

  
</script>

<footer>
  <%- include('../partials/footer'); %>
</footer>

</body>
</html>